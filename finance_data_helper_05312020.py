# -*- coding: utf-8 -*-
"""Finance_Data_Helper_05312020.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-RYNiOf4vBegoH7iE7iofkrNJ60VHKP
"""

# cell configuration for plotly
def enable_plotly_in_cell():
  import IPython
  from plotly.offline import init_notebook_mode
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
  '''))
  init_notebook_mode(connected=False)
  
get_ipython().events.register('pre_run_cell', enable_plotly_in_cell)

from plotly.offline import iplot
import plotly.graph_objs as go

enable_plotly_in_cell()

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',
            },
          });
        </script>
        '''))
  
configure_plotly_browser_state()

def get_yf_hist(symbol_list,startDate,endDate,interval):
  import matplotlib.pyplot as plt
  import datetime
  import yfinance as yf  

  # Get historical pricing data
  data = yf.download(symbol_list, startDate, endDate, interval)

  return data


def get_intraday(symbol_list,period,interval):
  intraday_list = []
  intraday_df = pd.DataFrame()
  for sym in symbol_list:
    intraday = yf.download(tickers=sym,
                           period=period,
                           interval=interval)
    intraday['symbol'] = sym
    intraday_df = pd.concat([intraday_df,intraday])

  return intraday_df

def rolling_zscore(data,return_period,window_length):
  log_returns = (np.log(data / data.shift(return_period)))
  zscore = (log_returns - log_returns.rolling(window_length).mean() / log_returns.rolling(window_length).std())
  #results_dict = dict({'log_returns':log_returns})
  results_df = pd.DataFrame(zscore)

  return results_df

def format_ohlcv_df(df):
  df = df.reset_index()
  df.columns = df.columns.str.lower()
  df = df.rename(columns={'adj close':'adj_close'})
  df['ln_adj_returns'] = (np.log(df['adj_close']/df['adj_close'].shift(1)))
  df['weekday'] = pd.Series(df['date']).dt.weekday
  df['day_name'] = df['date'].dt.day_name()
  df['month_name'] = df['date'].dt.month_name()
  df['day'] = df['date'].dt.day
  df['weekday'] = df['date'].dt.weekday
  df['month'] = df['date'].dt.month
  df['year'] = df['date'].dt.year
  df['quarter'] = df['date'].dt.quarter
  df['quarter_name'] = "Q"+df['quarter'].astype(str)

  df['ohlc_median'] = df[['open','high','low','adj_close']].median(axis=1,skipna=True)
  df['ohlc_mean'] = df[['open','high','low','adj_close']].mean(axis=1,skipna=True)

  df['hl_range'] = (df['high'] - df['low'])
  df['intraday_chg'] = (df['adj_close'] - df['open']) 
  df['ln_adj_returns_weekly'] = (df['adj_close'] / df['adj_close'].shift(5))

  return df

  def plotly_ts_heatmap(df,z,x,y,title):
    fig = go.Figure()
  
    fig.add_trace(go.Heatmap(z=z,x=x,y=y,colorscale='rdylgn'))
    
    #fig.show()
    return fig.update_layout(title=title,template='plotly_dark')